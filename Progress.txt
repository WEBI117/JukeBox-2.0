WEBAPP
------

Progress
---
Have a react native application skeleton up and running.

ToDo:
--
* Learn to create custom components in react and implement a basic
  testcomponent. (Done)
* Implement a react class based component. (Done)
* Learn about react class components and state. (Done)
  with general implementation.
* Connect React application to express backend. (Done)
* Learn about javascript promises in depth. (Done)
* Render the returned value from the fetch api query on the React side. (Done)
* Create a wireframe/layout for the main page of the application.
* Build WebApp front end.

Goal:
--
Create a fully functional React front-end web app for jukebox-2.0 with an express
backend api to route requests to and from the clients.


React uselful concepts.
--
* The simplest react component is a function that returns a jsx element.
* The props object in each react component is a single object that refers to the
properties and children for that react component.

State
-
* State can only be used in React class based components.
* The state is assigned is initialized with a json object in the constructor
  and is the only time that it is assigned a value using the '=' sign. All
  subsequent changes to state are made by passing a new object representing
  the new state to the this.setState(newStateObject) method. Calling this
  method re-renders the component automatically.
* State updates may be asynchronous and React may batch multiple setState() calls into a single update for performance.
* State can be used to trickle data down to child components thrugh props. But
  this flow can only go downwards.

API
------
* Learn about express js Build WebApp front en Build WebApp front end.
